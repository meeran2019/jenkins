---------------------------------------------------------------------------------------------------------
JENKINS ESSENTIAL
---------------------------------------------------------------------------------------------------------

    Discussed about CI, CD, git and test details. 


---------------------------------------------------------------------------------------------------------
JENKINS ADMINISTRATION:
---------------------------------------------------------------------------------------------------------

    $JENKINS_HOME = /var/lib/jenkins  (default jenkins file path)


JENKINS UPGRADE: 

    https://university.cloudbees.com/jenkins-administration-1-essentials/769786

    1. On Linux, replace jenkins.war file to /usr/share/jenkins


MANAGE JENKINS: 

    Jenkins Controller      -   Master which control all. 
    Jenkins Node (Can be Linux server, Windows server etc)      -   Execute the tasks.
    Executor -  a thread for execution of tasks. no of concurrent tasks executed at a time.
    agent   -   tool manages the executors on remote node. 


SYSTEM CONFIGURATION: 

    CONFIGURE SYSTEM: 

        Configure many standard aspects of jenkins including JDK installation, Build tools installation, Version control tools etc.
        Configure global systems and path. 

    GLOBAL TOOLS CONFIGURATION: 

        To configure tools used for pipeline.
        Depends upon plugin, additional configuration added. 
        Configure many standard aspects of jenkins including JDK installation, Build tools installation, Version control tools etc.
        Multiple version of maven or jdk can be installed. 


MANAGE PLUGINS: 

    Many features are implemented with multiple plugins and many plugins have dependencies on other plugins.

    Plugin is a jar file and stored under $JENKINS_HOME/plugins directory. 

    Manage Jenkins -> System Information - To see a list of plugins. 

    Enabled/Disabled plugins - NOTE: To enable/disable plugins. Suggest to go for disable instead of uninstall.

    Plugins can also install manually without using UI.


BUILD NOTIFICATIONS: 

    Jenkins allow to send notifications through email, slack or other channels. 

    Manage Jenkins -> Configure System

    Some plugins used are ,
        cleaning up and notifications, Notification plugin, email-ext plugin, mailer plugin, slack plugin.


WORKING WITH NODES: 

    Node is a server where jenkins run build jobs. Agent is a tool that manages build execution on the node. 
    Available nodes and agent listed on "Build executor status".

    Manage Jenkins -> Manage Nodes and Clouds. 


BUILD AGENTS: 

    Manage Jenkins -> Configure Global Security -> enable "TCP Port for JNLP agents" to random.

    https://bhargavamin.com/how-to-do/setup-jenkins-slave-amazon-linux-aws/

    https://university.cloudbees.com/jenkins-administration-1-essentials/868943


---------------------------------------------------------------------------------------------------------
SECURITY: 
---------------------------------------------------------------------------------------------------------

    To select authentication method - Manage Jenkins -> Configure Global Security -> Security Realm 

    To manage users - Manage Jenkins -> Security -> Manage users.

    To select authorization - Manage Jenkins -> Configure global security -> Authorization

    Accouting: 
        Auditing can be done by using "Audit Trail Plugin".

    Global Security Settings: 

        Port for inbound agents: 
            It can be used to launch an application on client desktop by using resources that are hosted on remote server. 

        Configure credential provider: 
            It allow to choose provider like git hub, artifactory etc. 

        Manage Credentials: 
            Used to store the credentials in different format. 

FOLDERS: 

    It can be created with separate namespace for different projects with same name and helps to simplify the pipeline. 

    Move - Helps to move job from one folder to another.


MONITOR JENKINS: 

    Manage Jenkins -> Status Information
        
        System log - To display system logs. 

        Load Statistics - To track utilization of executors. 

RUNNING BACKUPS: 

    $JENKINS_HOME directory to be backedup.
    ./confix.xml file 

    https://university.cloudbees.com/jenkins-administration-1-essentials/769813


AUTOMATE JENKINS:    

    jenkins CLI can be used.

    Manage Jenkins -> Tools and Actions -> Jenkins CLI 

    1. Download the jenkins-cli.jar file
    2. Run the command  "java -jar jenkins-cli.jar -s http://localhost:8080/ -webSocket help "
            -s - URL to connecto to jenkins.
    3. Manage Jenkins -> Tools and Actions -> Jenkins CLI -> Available commands -> Gives list of core jenkins available command. 
        By using plugins, can contribute additional commands. 

    Can also use groovysh/groovy in CLI. 
            "java -jar jenkins-cli.jar -s http://localhost:8080/ groovysh "

    JENKINS API: 

        curl -X POST \
        --data token=${TOKEN} \
        --data-urlencode json=`{"parameter": [{"name":"id", "value":"123"}, \
            {"name":"verbosity"}, "value":"high"}]}` \
        http://${JENKINS_URL}/job/${MY_PROJECT}/build/api

    SCRIPT CONSOLE: 
        It helps to type in and execute an arbitrary groovy script on the server. 
            Manage Jenkins -> Tools and Actions -> Script Console.

    RELOAD CONFIGURATION FROM DISK: 
        If any configuration changes through CLI, it will require ro refresh to update the configuration.

        Manage Jenkins -> Tools and Actions -> Reload configuration from disk.

    
---------------------------------------------------------------------------------------------------------

PIPELINE AS CODE: 

    Pipeline is defined in jenkinsfile that uses DSL based on groovy script. 
    Deployment flow is expressed as Code.
    jenkinsfile can be stored in SCM.


PIPELINE SECTION: 

    jenkinsfile that defines the pipeline uses DSL(Domain Specific Language) based on Apache Groovy.

    It consists of following structure, 

        pipeline 
            agent   -   It defines the node where the programs and script to be executed. 
                Stages  -   It defines the work to be done. 
                    Steps   -   Execute the actual program and scripts to be run. 


    DECLARATIVE vs SCRIPTED PIPELINE: 

        Scripted: 
            Uses Pipeline DSL Groovy to define build steps and accomplish in single script that would require many freestyle jobs chained together.
            Executed serially from top to bottom.
            Relies on groovy expression.

        Declarative: 
            It helps to define a pipeline without learn groovy.
            It offers predefined structure. 

        http://localhost:8080/job/test-pipeline-project/directive-generator/

        Snippet Generator                   -   Used to generate the script. 
        Declarative Directive Generator     -   Used to generate the pipeline code for declarative. 

    BLUE OCEAN GRAPHICAL EDITOR: 

        It simplies the tasks of create and running declarative pipelines.
        It integrate with Git, github etc. 


SKELETAL PIPELINE USING BLUE OCEAN: 
    
    https://university.cloudbees.com/jenkins-pipeline-1-essentials/756201

    1. Jenkins -> Open Blue Ocean 
    2. Blue Ocean -> Create Pipeline -> Select Source (Git, Github etc).
        click ctrl + S to update jenkins file manually.
    
        pipeline {
            agent any
            stages {
                stage('Buzz Buzz') {
                steps {
                    echo 'Bees Buzz!'
                }
                }

                stage('Bees Bees') {
                steps {
                    echo 'Buzz, Bees, Buzz!'
                    echo 'Bees Buzzing!'
                    echo 'Bees Buzzing Again'
                }
                }

            }
            }








        

